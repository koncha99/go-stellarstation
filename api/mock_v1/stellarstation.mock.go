// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/infostellarinc/go-stellarstation/api/v1 (interfaces: StellarStationServiceClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/infostellarinc/go-stellarstation/api/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockStellarStationServiceClient is a mock of StellarStationServiceClient interface
type MockStellarStationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockStellarStationServiceClientMockRecorder
}

// MockStellarStationServiceClientMockRecorder is the mock recorder for MockStellarStationServiceClient
type MockStellarStationServiceClientMockRecorder struct {
	mock *MockStellarStationServiceClient
}

// NewMockStellarStationServiceClient creates a new mock instance
func NewMockStellarStationServiceClient(ctrl *gomock.Controller) *MockStellarStationServiceClient {
	mock := &MockStellarStationServiceClient{ctrl: ctrl}
	mock.recorder = &MockStellarStationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStellarStationServiceClient) EXPECT() *MockStellarStationServiceClientMockRecorder {
	return m.recorder
}

// AddTle mocks base method
func (m *MockStellarStationServiceClient) AddTle(arg0 context.Context, arg1 *v1.AddTleRequest, arg2 ...grpc.CallOption) (*v1.AddTleResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTle", varargs...)
	ret0, _ := ret[0].(*v1.AddTleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTle indicates an expected call of AddTle
func (mr *MockStellarStationServiceClientMockRecorder) AddTle(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTle", reflect.TypeOf((*MockStellarStationServiceClient)(nil).AddTle), varargs...)
}

// CancelPlan mocks base method
func (m *MockStellarStationServiceClient) CancelPlan(arg0 context.Context, arg1 *v1.CancelPlanRequest, arg2 ...grpc.CallOption) (*v1.CancelPlanResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelPlan", varargs...)
	ret0, _ := ret[0].(*v1.CancelPlanResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelPlan indicates an expected call of CancelPlan
func (mr *MockStellarStationServiceClientMockRecorder) CancelPlan(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPlan", reflect.TypeOf((*MockStellarStationServiceClient)(nil).CancelPlan), varargs...)
}

// GetTle mocks base method
func (m *MockStellarStationServiceClient) GetTle(arg0 context.Context, arg1 *v1.GetTleRequest, arg2 ...grpc.CallOption) (*v1.GetTleResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTle", varargs...)
	ret0, _ := ret[0].(*v1.GetTleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTle indicates an expected call of GetTle
func (mr *MockStellarStationServiceClientMockRecorder) GetTle(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTle", reflect.TypeOf((*MockStellarStationServiceClient)(nil).GetTle), varargs...)
}

// ListPlans mocks base method
func (m *MockStellarStationServiceClient) ListPlans(arg0 context.Context, arg1 *v1.ListPlansRequest, arg2 ...grpc.CallOption) (*v1.ListPlansResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPlans", varargs...)
	ret0, _ := ret[0].(*v1.ListPlansResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlans indicates an expected call of ListPlans
func (mr *MockStellarStationServiceClientMockRecorder) ListPlans(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlans", reflect.TypeOf((*MockStellarStationServiceClient)(nil).ListPlans), varargs...)
}

// ListUpcomingAvailablePasses mocks base method
func (m *MockStellarStationServiceClient) ListUpcomingAvailablePasses(arg0 context.Context, arg1 *v1.ListUpcomingAvailablePassesRequest, arg2 ...grpc.CallOption) (*v1.ListUpcomingAvailablePassesResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUpcomingAvailablePasses", varargs...)
	ret0, _ := ret[0].(*v1.ListUpcomingAvailablePassesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUpcomingAvailablePasses indicates an expected call of ListUpcomingAvailablePasses
func (mr *MockStellarStationServiceClientMockRecorder) ListUpcomingAvailablePasses(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUpcomingAvailablePasses", reflect.TypeOf((*MockStellarStationServiceClient)(nil).ListUpcomingAvailablePasses), varargs...)
}

// OpenSatelliteStream mocks base method
func (m *MockStellarStationServiceClient) OpenSatelliteStream(arg0 context.Context, arg1 ...grpc.CallOption) (v1.StellarStationService_OpenSatelliteStreamClient, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OpenSatelliteStream", varargs...)
	ret0, _ := ret[0].(v1.StellarStationService_OpenSatelliteStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSatelliteStream indicates an expected call of OpenSatelliteStream
func (mr *MockStellarStationServiceClientMockRecorder) OpenSatelliteStream(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSatelliteStream", reflect.TypeOf((*MockStellarStationServiceClient)(nil).OpenSatelliteStream), varargs...)
}

// ReservePass mocks base method
func (m *MockStellarStationServiceClient) ReservePass(arg0 context.Context, arg1 *v1.ReservePassRequest, arg2 ...grpc.CallOption) (*v1.ReservePassResponse, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReservePass", varargs...)
	ret0, _ := ret[0].(*v1.ReservePassResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReservePass indicates an expected call of ReservePass
func (mr *MockStellarStationServiceClientMockRecorder) ReservePass(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReservePass", reflect.TypeOf((*MockStellarStationServiceClient)(nil).ReservePass), varargs...)
}
